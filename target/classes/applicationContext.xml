<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context = "http://www.springframework.org/schema/context"
	xmlns:p = "http://www.springframework.org/schema/p"
	xmlns:aop = "http://www.springframework.org/schema/aop"
	xmlns:tx = "http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.xsd 
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">


	<!-- Datasource connection settings in Spring -->
	<!-- <bean id="springDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="username" value="root" />
		<property name="password" value="root" />
		<property name="removeAbandoned" value="true" />
		<property name="initialSize" value="20" />
		<property name="maxActive" value="30" />
	</bean> -->
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="url" value="jdbc:oracle:thin:@IONDELVM84:1521:DELHIDEV" />
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="username" value="rkdaim" />
		<property name="password" value="rkdaimpwd" />
	</bean>
	
	<bean id = "platformTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Dao class configuration in spring -->
	<!-- <bean id="EmployeeDatabaseBean" class="db.EmployeeDAOImpl">
		<property name="dataSource" ref="springDataSource" />
	</bean> -->
	
	<bean id = "studentJDBCTemplate" class = "tutorialpoints.spring.jdbc.StudentJDBCTemplate">
      <constructor-arg  name="dataSource" ref="dataSource"></constructor-arg>
      <constructor-arg 	name="platformTransactionManager" ref="platformTransactionManager"></constructor-arg>    
   </bean>
   
   <!-- Tx AOP -->
	<tx:advice id="txAdvice" transaction-manager="platformTransactionManager">
		<tx:attributes>
			<tx:method name="createAopTx"/>
		</tx:attributes>
	</tx:advice>
	
	<tx:annotation-driven proxy-target-class="true" transaction-manager="platformTransactionManager" />
	
	<aop:config>
		<aop:pointcut expression="execution(* tutorialpoints.spring.jdbc.StudentJDBCTemplate.createAopTx(..))" id="createOperation"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="createOperation"/>
	</aop:config>
	
	<!-- to allow wiring using annotations -->
	<context:annotation-config/>
	<!-- to allow aspects using annotations -->
	<aop:aspectj-autoproxy />
	
	<bean id="twitter" class="journel.dev.spring.TwitterServiceImpl" lazy-init="true"></bean>
    <bean id="MyXMLApp" class="journel.dev.spring.SpringXmlApplication" lazy-init="true">
        <property name="service" ref="twitter"></property>
    </bean>
    
    <bean id="beanTemplate" abstract="true">
   		<property name = "message" value = "Hello World!"/>
      	<property name = "message2" value = "Hello Second World!"/>
      	<property name = "message3" value = "Namaste India!"/>
    </bean>
    
    <bean id = "helloWorld" class = "tutorialpoints.spring.xml.HelloWorld" lazy-init="true" scope="singleton" init-method="init" destroy-method="destroy">
      <property name = "message" value = "Hello World!"/>
      <property name = "message2" value = "Hello Second World!"/>
   </bean>
   
   <!-- using p:namespace for multiple instance variables -->
   <bean id = "helloIndia" class = "tutorialpoints.spring.xml.HelloIndia" lazy-init="true" scope="singleton" parent="helloWorld" 
   		p:message = "Hello World!" p:message3 = "Namaste India!" >
   </bean>
   
   <bean id = "helloIndia2" class = "tutorialpoints.spring.xml.HelloIndia" lazy-init="true" scope="singleton" parent="beanTemplate"></bean>
   
   <bean id = "helloWorld2" class = "tutorialpoints.spring.xml.HelloWorld" lazy-init="true" scope="prototype">
      <property name = "message" value = "Hello World! Prototype"/>
   </bean>
   
   <bean class="tutorialpoints.spring.xml.InitHelloWorld"></bean>
   
   <bean id = "spellChecker" class = "tutorialpoints.spring.xml.SpellChecker" lazy-init="true" scope="singleton"></bean>
   
   <!-- Text Editor & spell checker -->
   <bean id = "textEditor" class = "tutorialpoints.spring.xml.TextEditor" lazy-init="true" scope="singleton" autowire="constructor">
	  <!-- inner bean example -->
      <!-- <constructor-arg>
		<bean id = "spellChecker" class = "tutorialpoints.spring.xml.SpellChecker" lazy-init="true" scope="singleton"></bean>      	
      </constructor-arg> -->
      <constructor-arg type="java.lang.String" value="Notepad++" />
   </bean>
   
   <!-- Collections injection -->
   
   <bean id="address1" class="java.lang.String">
	   <constructor-arg>
	    	<value>foo</value>
	   </constructor-arg>
	</bean>
	
	<bean id="address2" class="java.lang.String">
	   <constructor-arg>
	    	<value>bar</value>
	   </constructor-arg>
	</bean>
   
   <bean id = "javaCollection" class = "tutorialpoints.spring.xml.JavaCollection" lazy-init="true" scope="singleton">
   		<!-- results in a setAddressList(java.util.List) call -->
	      <property name = "addressList">
	         <list>
	            <value>INDIA</value>
	            <value>Russia</value>
	            <value>USA</value>
	            <value>USA</value>
	            <ref bean = "address1"/>
	            <ref bean = "address2"/>
	         </list>
	      </property>
	
	      <!-- results in a setAddressSet(java.util.Set) call -->
	      <property name = "addressSet">
	         <set>
	            <value>INDIA</value>
	            <value>Russia</value>
	            <value>USA</value>
	            <value>USA</value>
	            <ref bean = "address1"/>
	            <ref bean = "address2"/>
	         </set>
	      </property>
	
	      <!-- results in a setAddressMap(java.util.Map) call -->
	      <property name = "addressMap">
	         <map>
	            <entry key = "1" value = "INDIA"/>
	            <entry key = "2" value = "Russia"/>
	            <entry key = "3" value = "USA"/>
	            <entry key = "4" value = "USA"/>
	            <entry key = "5" value-ref = "address1"/>
	            <entry key = "6" value-ref = "address2"/>
	         </map>
	      </property>
	      
	      <!-- results in a setAddressProp(java.util.Properties) call -->
	      <property name = "addressProp">
	         <props>
	            <prop key = "one">INDIA</prop>
	            <prop key = "one">INDIA</prop>
	            <prop key = "two">Russia</prop>
	            <prop key = "three">USA</prop>
	            <prop key = "four">USA</prop>
	         </props>
	      </property>
   </bean>
   
   <!-- annotation based injection -->
   <bean id = "student" class="tutorialpoints.spring.annotation.Student" lazy-init="true">
   		<property name = "name" value = "Zara" />
   		<property name = "age"  value = "11" />
   		<property name = "id"  value = "1" />
   </bean>
   
   <!-- Definition for student1 bean -->
   <bean id = "student1" class = "tutorialpoints.spring.annotation.Student" lazy-init="true">
      <property name = "name" value = "Nuha" />
      <property name = "age" value = "2"/>
      <property name = "id"  value = "2" />
   </bean>
   
   <bean id = "profile" class="tutorialpoints.spring.annotation.Profile" lazy-init="true" />
   
   <bean id = "textEditor1" class = "tutorialpoints.spring.annotation.TextEditor" lazy-init="true" scope="singleton" />
   
   <!-- aspect Oriented programming -->
   
   <bean id = "logging" class="tutorialpoints.spring.xml.aop.Logging" lazy-init="true" scope="singleton"/>
   
   <bean id = "logging2" class="tutorialpoints.spring.annotation.aspectj.Logging" lazy-init="true" scope="singleton"/>
   
   <!-- to define aop -->
   <aop:config>
   		<aop:aspect id="log" ref="logging">
   			<aop:pointcut expression="execution(* tutorialpoints.spring.annotation.Student.*(..))" id="selectAll"/>
   			<aop:before method="beforeAdvice" pointcut-ref="selectAll"/>
   			<aop:after method="afterAdvice" pointcut-ref="selectAll"/>
   			<aop:after-returning method="afterReturningAdvice" pointcut-ref="selectAll" returning="retVal"/>
   			<aop:after-throwing method="afterThrowingAdvice" pointcut-ref="selectAll" throwing="ex"/>
   		</aop:aspect>
   </aop:config>
    
</beans>